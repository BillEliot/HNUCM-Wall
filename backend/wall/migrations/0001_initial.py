# Generated by Django 3.1.6 on 2021-02-07 19:00

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('openid', models.CharField(default=0, max_length=50)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('avatar', models.ImageField(default='img/avatar/default.png', upload_to='img/avatar')),
                ('bio', models.CharField(max_length=100)),
                ('gender', models.CharField(default='男', max_length=5)),
                ('_class', models.CharField(max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('qq', models.CharField(blank=True, max_length=20, null=True)),
                ('wechat', models.CharField(blank=True, max_length=20, null=True)),
                ('coin', models.PositiveIntegerField(default=0)),
                ('auth', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcupointChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Bank_Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('subjectType', models.CharField(choices=[('zy', '中医'), ('xy', '西医')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Bank_UpdateMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='File_Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('subjectType', models.CharField(choices=[('zy', '中医'), ('xy', '西医')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('lecturer', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=30)),
                ('date', models.DateTimeField()),
                ('state', models.CharField(max_length=10)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('flavor', models.CharField(max_length=50)),
                ('channel', models.CharField(max_length=50)),
                ('function', models.CharField(max_length=200)),
                ('application', models.CharField(max_length=200)),
                ('image', models.ImageField(default='img/medicine/default.png', upload_to='img/medicine')),
                ('_type', models.CharField(choices=[('解表药', '解表药'), ('清热药', '清热药'), ('泻下药', '泻下药'), ('祛风湿药', '祛风湿药'), ('化湿药', '化湿药'), ('利水渗湿药', '利水渗湿药'), ('温里药', '温里药'), ('理气药', '理气药'), ('消食药', '消食药'), ('驱虫药', '驱虫药'), ('止血药', '止血药'), ('活血化瘀药', '活血化瘀药'), ('化痰止咳平喘药', '化痰止咳平喘药'), ('安神药', '安神药'), ('平肝息风药', '平肝息风药'), ('开窍药', '开窍药'), ('补虚药', '补虚药'), ('收涩药', '收涩药'), ('涌吐药', '涌吐药'), ('涌吐药', '涌吐药'), ('攻毒杀虫止痒药', '攻毒杀虫止痒药'), ('拨毒化腐生肌药', '拨毒化腐生肌药')], max_length=20)),
                ('subType', models.CharField(choices=[('/', '/'), ('发散风寒药', '发散风寒药'), ('发散风热药', '发散风热药'), ('清热泻火药', '清热泻火药'), ('清热燥湿药', '清热燥湿药'), ('清热解毒药', '清热解毒药'), ('清热凉血药', '清热凉血药'), ('清虚热药', '清虚热药'), ('攻下药', '攻下药'), ('润下药', '润下药'), ('峻下逐水药', '峻下逐水药'), ('祛风寒湿药', '祛风寒湿药'), ('祛风湿热药', '祛风湿热药'), ('祛风湿强筋骨药', '祛风湿强筋骨药'), ('利水消肿药', '利水消肿药'), ('利尿通淋药', '利尿通淋药'), ('利湿退黄药', '利湿退黄药'), ('凉血止血药', '凉血止血药'), ('化瘀止血药', '化瘀止血药'), ('收敛止血药', '收敛止血药'), ('温经止血药', '温经止血药'), ('活血止痛药', '活血止痛药'), ('活血调经药', '活血调经药'), ('活血疗伤药', '活血疗伤药'), ('破血消癓药', '破血消癓药'), ('温化寒痰药', '温化寒痰药'), ('清化热痰药', '清化热痰药'), ('止咳平喘药', '止咳平喘药'), ('重镇安神药', '重镇安神药'), ('养心安神药', '养心安神药'), ('平抑肝阳药', '平抑肝阳药'), ('息风止痉药', '息风止痉药'), ('补气药', '补气药'), ('补血药', '补血药'), ('补阴药', '补阴药'), ('补阳药', '补阳药'), ('固表止汗药', '固表止汗药'), ('敛肺涩肠药', '敛肺涩肠药'), ('固精缩尿止带药', '固精缩尿止带药')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Statistics_VirtualDiagnosis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_name', models.CharField(max_length=100)),
                ('patient_gender', models.CharField(max_length=100)),
                ('patient_age', models.CharField(max_length=100)),
                ('patient_chiefcomplaint', models.CharField(max_length=200)),
                ('patient_coldhot', models.CharField(max_length=100)),
                ('patient_sweat', models.CharField(max_length=100)),
                ('patient_pain', models.CharField(max_length=100)),
                ('patient_body', models.CharField(max_length=100)),
                ('patient_eareye', models.CharField(max_length=100)),
                ('patient_sleep', models.CharField(max_length=100)),
                ('patient_flavor', models.CharField(max_length=100)),
                ('patient_excretion', models.CharField(max_length=100)),
                ('patient_face', models.CharField(max_length=100)),
                ('patient_tongue', models.CharField(max_length=100)),
                ('patient_vein', models.CharField(max_length=100)),
                ('player_diagnosis', models.CharField(max_length=100)),
                ('player_syndrome', models.TextField()),
                ('player_method', models.CharField(max_length=100)),
                ('player_prescription', models.TextField()),
                ('player_acupoints', models.CharField(max_length=200)),
                ('ref_diagnosis', models.CharField(max_length=100)),
                ('ref_syndrome', models.TextField()),
                ('ref_method', models.CharField(max_length=100)),
                ('ref_prescription', models.TextField()),
                ('ref_acupoints', models.CharField(max_length=200)),
                ('date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('function', models.CharField(max_length=500)),
                ('song', models.CharField(max_length=500)),
                ('composition', models.ManyToManyField(to='wall.Medicine')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_type', models.CharField(max_length=10)),
                ('_from', models.CharField(max_length=10)),
                ('messageID', models.IntegerField()),
                ('commentContent', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('isRead', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Love',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isAnony', models.BooleanField(default=False)),
                ('nameTo', models.CharField(default='TA', max_length=20)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('thumbsUpUser', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('userFrom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userFrom', to=settings.AUTH_USER_MODEL)),
                ('userTo', models.ManyToManyField(blank=True, related_name='userTo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Lose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isFound', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('loseDate', models.CharField(max_length=20)),
                ('publicDate', models.DateTimeField(auto_now_add=True)),
                ('comments', models.ManyToManyField(blank=True, to='wall.Comment')),
                ('images', models.ManyToManyField(blank=True, to='wall.Image')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-publicDate',),
            },
        ),
        migrations.AddField(
            model_name='image',
            name='love',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.love'),
        ),
        migrations.CreateModel(
            name='Hot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('content', models.TextField()),
                ('date', models.DateField(auto_now=True)),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Help',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('comments', models.ManyToManyField(blank=True, to='wall.Comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='File_UploadHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('_file', models.FileField(upload_to='file/')),
                ('_type', models.CharField(choices=[('word', 'word'), ('excel', 'excel'), ('ppt', 'ppt'), ('pdf', 'pdf')], max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('viewCount', models.PositiveIntegerField(default=0)),
                ('downloadCount', models.PositiveIntegerField(default=0)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.file_subject')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isSold', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=20)),
                ('price', models.FloatField()),
                ('new', models.IntegerField()),
                ('description', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('comments', models.ManyToManyField(blank=True, to='wall.Comment')),
                ('images', models.ManyToManyField(blank=True, to='wall.Image')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='love',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.love'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='wall.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('ITDirector', models.ManyToManyField(blank=True, related_name='ITDirector', to=settings.AUTH_USER_MODEL)),
                ('feedbackDirector', models.ManyToManyField(blank=True, related_name='feedbackDirector', to=settings.AUTH_USER_MODEL)),
                ('financeDirector', models.ManyToManyField(blank=True, related_name='financeDirector', to=settings.AUTH_USER_MODEL)),
                ('learningDirector', models.ManyToManyField(blank=True, related_name='learningDirector', to=settings.AUTH_USER_MODEL)),
                ('planDirector', models.ManyToManyField(blank=True, related_name='planDirector', to=settings.AUTH_USER_MODEL)),
                ('president', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='president', to=settings.AUTH_USER_MODEL)),
                ('presidentAssistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presidentAssistant', to=settings.AUTH_USER_MODEL)),
                ('propagandaDirector', models.ManyToManyField(blank=True, related_name='propagandaDirector', to=settings.AUTH_USER_MODEL)),
                ('vicePresident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vicePresident', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=20)),
                ('allQuestions', models.IntegerField()),
                ('correctQuestions', models.IntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Bank_UploadHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Bank_Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('isTestPaper', models.BooleanField(default=False)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.bank_subject')),
            ],
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('A', models.CharField(blank=True, max_length=50)),
                ('B', models.CharField(blank=True, max_length=50)),
                ('C', models.CharField(blank=True, max_length=50)),
                ('D', models.CharField(blank=True, max_length=50)),
                ('E', models.CharField(blank=True, max_length=50)),
                ('questionType', models.CharField(choices=[('singleA', '单选-题型A'), ('singleB', '单选-题型B'), ('multiple', '多选'), ('blank', '填空'), ('judge', '判断'), ('term', '名词解释'), ('qa', '问答'), ('case', '病案分析')], default='singleA', max_length=10)),
                ('isBlankSeq', models.BooleanField(default=True)),
                ('answer', models.TextField()),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.bank_chapter')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('tags', models.CharField(default='', max_length=50)),
                ('content', models.TextField()),
                ('neededCoin', models.PositiveIntegerField(default=0)),
                ('publicDate', models.DateTimeField(auto_now_add=True)),
                ('editDate', models.DateTimeField(auto_now=True)),
                ('viewCount', models.PositiveIntegerField(default=0)),
                ('isAdopted', models.BooleanField(default=False)),
                ('comments', models.ManyToManyField(blank=True, to='wall.Comment')),
                ('thumbsUpUser', models.ManyToManyField(blank=True, related_name='thumbsUp', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-publicDate',),
            },
        ),
        migrations.CreateModel(
            name='Acupoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('location', models.CharField(max_length=500)),
                ('function', models.CharField(max_length=500)),
                ('_type', models.CharField(max_length=50)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wall.acupointchannel')),
            ],
        ),
        migrations.CreateModel(
            name='Activity_JinGui',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='元气满满的一天～')),
                ('cover', models.ImageField(default='img/JinGui/default.png', upload_to='img/JinGui')),
                ('audio', models.FileField(default='audio/JinGui/default.mp3', upload_to='audio/JinGui')),
                ('date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='comments',
            field=models.ManyToManyField(blank=True, related_name='comments', to='wall.Comment'),
        ),
        migrations.AddField(
            model_name='user',
            name='errorBook',
            field=models.ManyToManyField(blank=True, related_name='errorBook', to='wall.Bank'),
        ),
        migrations.AddField(
            model_name='user',
            name='followings',
            field=models.ManyToManyField(blank=True, related_name='following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='messages',
            field=models.ManyToManyField(blank=True, related_name='messages', to='wall.Message'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
